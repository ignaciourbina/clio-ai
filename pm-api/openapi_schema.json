{
  "openapi": "3.1.0",
  "info": {
    "title": "Agile Project Management API",
    "description": "Manage projects via REST",
    "version": "2.0.0"
  },
  "paths": {
    "/projects/": {
      "get": {
        "summary": "List Projects",
        "description": "Return **all** projects \u2013 future work: add query params for filtering.",
        "operationId": "list_projects_projects__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  },
                  "type": "array",
                  "title": "Response List Projects Projects  Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Project",
        "description": "Insert a new *Project* row and return the persisted object.",
        "operationId": "create_project_projects__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/projects/{project_id}": {
      "get": {
        "summary": "Get Project",
        "operationId": "get_project_projects__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "summary": "Update Project",
        "operationId": "update_project_projects__project_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Project",
        "operationId": "delete_project_projects__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/projects/{project_id}/notes/": {
      "get": {
        "summary": "List Notes",
        "operationId": "list_notes_projects__project_id__notes__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProjectNote"
                  },
                  "type": "array",
                  "title": "Response List Notes Projects  Project Id  Notes  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "post": {
        "summary": "Create Note",
        "operationId": "create_note_projects__project_id__notes__post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectNote"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/notes/{note_id}": {
      "get": {
        "summary": "Get Note",
        "operationId": "get_note_notes__note_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Note Id"
            },
            "name": "note_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectNote"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "put": {
        "summary": "Update Note",
        "operationId": "update_note_notes__note_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Note Id"
            },
            "name": "note_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectNote"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Note",
        "operationId": "delete_note_notes__note_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Note Id"
            },
            "name": "note_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/dataset": {
      "get": {
        "summary": "Download Db",
        "description": "Download the *raw* SQLite file for offline analysis/back\u2011ups.",
        "operationId": "download_db_api_dataset_get",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      },
      "delete": {
        "summary": "Purge Db",
        "description": "Delete DB file **irrevocably** and recreate an empty schema.",
        "operationId": "purge_db_api_dataset_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/dataset/raw": {
      "get": {
        "summary": "Download Db Raw",
        "description": "Download the *raw* SQLite file embedded in JSON (base64\u2011encoded).\nClients receive {\"filename\": \"...\", \"data\": \"<base64>\"}.",
        "operationId": "download_db_raw_api_dataset_raw_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Basic connectivity check \u2013 returns fixed JSON.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "NoteIn": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "NoteIn",
        "description": "Input schema for creating a project note."
      },
      "NoteUpdate": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          }
        },
        "type": "object",
        "title": "NoteUpdate",
        "description": "Payload for updating a project note."
      },
      "Project": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "UTC when row was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "UTC when row was last modified"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "description": "Human\u2011friendly code, e.g. P\u2011101"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Project title"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Free\u2011form details / scope notes"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Status label (Planned / Active / Done / On\u2011Hold)",
            "default": "Planned"
          },
          "priority": {
            "type": "string",
            "title": "Priority",
            "description": "High / Medium / Low",
            "default": "Medium"
          },
          "domain": {
            "type": "string",
            "title": "Domain",
            "description": "Business domain / area owner"
          },
          "next_steps": {
            "type": "string",
            "title": "Next Steps",
            "description": "Immediate next actions / blockers"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "title": "Deadline",
            "description": "Target completion date (UTC)"
          },
          "project_type": {
            "type": "string",
            "title": "Project Type",
            "description": "Epic / Feature / Maintenance / ..."
          },
          "tooling": {
            "type": "string",
            "title": "Tooling",
            "description": "Stack or primary tools in use"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "name"
        ],
        "title": "Project",
        "description": "Represents a high\u2011level project in an agile board."
      },
      "ProjectIn": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "Planned"
          },
          "next_steps": {
            "type": "string",
            "title": "Next Steps"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "title": "Deadline"
          },
          "project_type": {
            "type": "string",
            "title": "Project Type"
          },
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "tooling": {
            "type": "string",
            "title": "Tooling"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "name"
        ],
        "title": "ProjectIn",
        "description": "*Input* schema for **create** project."
      },
      "ProjectNote": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "UTC when row was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At",
            "description": "UTC when row was last modified"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "project_id": {
            "type": "integer",
            "title": "Project Id"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Free-form note content"
          }
        },
        "type": "object",
        "required": [
          "project_id",
          "content"
        ],
        "title": "ProjectNote",
        "description": "Notebooks or logs attached to a parent project."
      },
      "ProjectUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "next_steps": {
            "type": "string",
            "title": "Next Steps"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "title": "Deadline"
          },
          "project_type": {
            "type": "string",
            "title": "Project Type"
          },
          "domain": {
            "type": "string",
            "title": "Domain"
          },
          "tooling": {
            "type": "string",
            "title": "Tooling"
          },
          "priority": {
            "type": "string",
            "title": "Priority"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "title": "ProjectUpdate",
        "description": "Payload for **partial update** (PUT) \u2013 all fields optional."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}